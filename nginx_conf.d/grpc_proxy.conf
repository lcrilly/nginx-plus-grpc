# Logging
map $upstream_trailer_grpc_status $grpc_status {
    default $upstream_trailer_grpc_status; # We normally expect to receive grpc-status as a trailer
    ''      $sent_http_grpc_status;        # Else use the header, regardless of who generated it
}
log_format grpc_kv '$time_iso8601 client=$remote_addr uri=$uri http-status=$status grpc-status=$grpc_status '
                   'upstream=$upstream_addr rx-bytes=$request_length tx-bytes=$bytes_sent';

# Backend gRPC services
upstream hello_world {
    zone hello_world 64k;
    server hello_world:50051;
}
upstream amex_text {
    zone amex_text 64k;
    server amex_text:3000;
}
upstream route_guide {
    zone route_guide 64k;
    server route_guide:50051;
}

server {
    listen 50051 http2; # For demo purposes only!

    listen 443 http2 ssl;
    ssl_certificate     conf.d/grpc.example.com.crt;
    ssl_certificate_key conf.d/grpc.example.com.key;

    status_zone "gRPC frontend";
    access_log /var/log/nginx/access.log grpc_kv;
    error_log  /var/log/nginx/error.log  debug;

    grpc_connect_timeout       2s;
    grpc_next_upstream_timeout 2s;
    add_header backend $upstream_addr always;

    # gRPC service routing
    location /api. {
        status_zone "gRPC Amex Text";
        health_check mandatory type=grpc;
        grpc_pass grpc://amex_text;
    }

    location /routeguide. {
        status_zone "gRPC Route Guide";
        health_check type=grpc grpc_status=12;
        grpc_pass grpc://route_guide;
    }

    location /helloworld. {
        status_zone "gRPC Hello World";
        health_check type=grpc grpc_status=12;
        auth_jwt helloworld token=$http_token;
        auth_jwt_key_file conf.d/hs256_mysecret.jwk;
        grpc_pass grpc://hello_world;
    }

    # Error responses
    include conf.d/errors.grpc_conf;    # gRPC-compliant error responses
    default_type application/grpc;      # Ensure gRPC for all error responses
    location / {                        # Catch all
        limit_except POST { deny all; } # If not POST then not a gRPC client,
        error_page 403 = @non_grpc_err; #  so handle this with a named location

        add_header content-type application/grpc;
        add_header grpc-status 12;
        add_header grpc-message unimplemented;
        return 204;
    }
    location @non_grpc_err {
        default_type text/plain;
        return 400 'Please talk gRPC to this server\n';
    }
}
